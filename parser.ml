type token =
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | TIMES
  | EQUAL
  | LESS
  | MORE
  | LESSEQUAL
  | MOREEQUAL
  | NOTEQUAL
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | FUN
  | ARROW
  | REC
  | NUMBER of (int)
  | VAR of (string)
  | TRUE
  | FALSE
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* 補助的な変数、関数、型などの定義 *)
# 32 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* EQUAL *);
  263 (* LESS *);
  264 (* MORE *);
  265 (* LESSEQUAL *);
  266 (* MOREEQUAL *);
  267 (* NOTEQUAL *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LET *);
  272 (* IN *);
  273 (* FUN *);
  274 (* ARROW *);
  275 (* REC *);
  278 (* TRUE *);
  279 (* FALSE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  276 (* NUMBER *);
  277 (* VAR *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\003\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\003\000\002\000\002\000\004\000\
\001\000\008\000\006\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\006\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\002\000\003\000\004\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\006\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000"

let yysindex = "\005\000\
\165\000\000\000\165\000\165\000\165\000\242\254\235\254\000\000\
\000\000\000\000\000\000\229\255\082\255\000\000\087\255\082\255\
\111\255\243\254\003\255\248\254\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\000\000\000\000\000\000\
\165\000\246\254\165\000\165\000\036\255\036\255\082\255\124\255\
\124\255\124\255\124\255\124\255\124\255\160\255\006\255\183\255\
\229\255\165\000\165\000\165\000\229\255\206\255\229\255\165\000\
\229\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\001\000\000\000\000\000\016\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\061\000\031\000\074\000\
\087\000\100\000\113\000\126\000\139\000\000\000\000\000\000\000\
\149\000\000\000\000\000\000\000\154\000\000\000\158\000\000\000\
\162\000"

let yygindex = "\000\000\
\255\255\027\000\000\000"

let yytablesize = 444
let yytable = "\020\000\
\012\000\015\000\016\000\017\000\018\000\001\000\019\000\034\000\
\035\000\036\000\047\000\051\000\024\000\000\000\000\000\023\000\
\000\000\000\000\000\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\000\000\000\000\015\000\046\000\
\000\000\048\000\049\000\000\000\003\000\000\000\030\000\031\000\
\023\000\030\000\030\000\030\000\000\000\013\000\000\000\000\000\
\053\000\054\000\055\000\000\000\000\000\000\000\057\000\008\000\
\009\000\010\000\011\000\000\000\014\000\000\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\016\000\030\000\030\000\000\000\000\000\000\000\030\000\
\030\000\030\000\003\000\030\000\000\000\000\000\017\000\003\000\
\032\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\000\000\018\000\000\000\008\000\009\000\010\000\
\011\000\000\000\008\000\009\000\010\000\011\000\000\000\003\000\
\019\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\000\000\033\000\003\000\020\000\021\000\022\000\
\023\000\000\000\008\000\009\000\010\000\011\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\000\000\008\000\
\009\000\010\000\011\000\000\000\008\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\011\000\000\000\000\000\
\003\000\010\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\008\000\009\000\010\000\011\000\003\000\
\000\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\000\000\000\000\000\000\000\000\052\000\000\000\
\000\000\000\000\008\000\009\000\010\000\011\000\003\000\000\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\008\000\009\000\010\000\011\000\003\000\000\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\009\000\010\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\012\000\000\000\
\012\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\023\000\000\000\023\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\000\000\015\000\015\000\000\000\015\000\013\000\
\013\000\013\000\000\000\013\000\013\000\013\000\013\000\013\000\
\013\000\000\000\013\000\013\000\000\000\013\000\014\000\014\000\
\014\000\000\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\016\000\014\000\000\000\000\000\016\000\
\016\000\016\000\016\000\016\000\016\000\000\000\016\000\016\000\
\017\000\016\000\000\000\000\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\017\000\017\000\018\000\017\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\018\000\018\000\019\000\018\000\000\000\000\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\020\000\
\019\000\000\000\000\000\020\000\020\000\020\000\020\000\020\000\
\020\000\000\000\020\000\020\000\021\000\020\000\000\000\000\000\
\021\000\021\000\021\000\021\000\021\000\021\000\008\000\021\000\
\021\000\000\000\021\000\022\000\000\000\000\000\000\000\011\000\
\000\000\008\000\008\000\010\000\008\000\003\000\022\000\022\000\
\004\000\022\000\011\000\011\000\000\000\011\000\010\000\010\000\
\005\000\010\000\000\000\006\000\000\000\007\000\000\000\000\000\
\008\000\009\000\010\000\011\000"

let yycheck = "\021\001\
\000\000\003\000\004\000\005\000\019\001\001\000\021\001\021\001\
\006\001\018\001\021\001\006\001\000\000\255\255\255\255\000\000\
\255\255\255\255\255\255\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\255\255\255\255\000\000\033\000\
\255\255\035\000\036\000\255\255\001\001\255\255\012\000\013\000\
\005\001\015\000\016\000\017\000\255\255\000\000\255\255\255\255\
\050\000\051\000\052\000\255\255\255\255\255\255\056\000\020\001\
\021\001\022\001\023\001\255\255\000\000\255\255\255\255\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\000\000\048\000\049\000\255\255\255\255\255\255\053\000\
\054\000\055\000\001\001\057\000\255\255\255\255\000\000\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\000\000\255\255\020\001\021\001\022\001\
\023\001\255\255\020\001\021\001\022\001\023\001\255\255\001\001\
\000\000\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\001\001\000\000\003\001\004\001\
\005\001\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\255\255\000\000\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
\001\001\000\000\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\001\001\
\255\255\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\001\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\001\001\255\255\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\255\255\
\016\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\255\255\016\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\255\255\016\001\002\001\
\003\001\004\001\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\255\255\016\001\002\001\003\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\014\001\002\001\016\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\002\001\016\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\002\001\016\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\002\001\016\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\002\001\
\016\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\002\001\016\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\002\001\013\001\
\014\001\255\255\016\001\002\001\255\255\255\255\255\255\002\001\
\255\255\013\001\014\001\002\001\016\001\001\001\013\001\014\001\
\004\001\016\001\013\001\014\001\255\255\016\001\013\001\014\001\
\012\001\016\001\255\255\015\001\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQUAL\000\
  LESS\000\
  MORE\000\
  LESSEQUAL\000\
  MOREEQUAL\000\
  NOTEQUAL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  REC\000\
  TRUE\000\
  FALSE\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 39 "parser.mly"
 ( Syntax.Number (_1) )
# 263 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 41 "parser.mly"
 ( Syntax.Var (_1))
# 270 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
 ( Syntax.Bool (true) )
# 276 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
 ( Syntax.Bool (false) )
# 282 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 47 "parser.mly"
 ( _2 )
# 289 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 51 "parser.mly"
 (Syntax.App (_1 , _2))
# 297 "parser.ml"
               : 'app))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 53 "parser.mly"
 (Syntax.App (_1 , _2))
# 305 "parser.ml"
               : 'app))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 57 "parser.mly"
 (Syntax.Fun (_2,_4))
# 313 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app) in
    Obj.repr(
# 59 "parser.mly"
 (_1)
# 320 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 61 "parser.mly"
 ( Syntax.Rec (_3, _4, _6, _8))
# 330 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 63 "parser.mly"
 ( Syntax.Let (_2, _4, _6))
# 339 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 65 "parser.mly"
 ( _1 )
# 346 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 67 "parser.mly"
 ( Syntax.Op (_1, Syntax.Plus, _3) )
# 354 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 69 "parser.mly"
 ( Syntax.Op (_1, Syntax.Minus, _3) )
# 362 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 71 "parser.mly"
 ( Syntax.Op (_1, Syntax.Times, _3) )
# 370 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 73 "parser.mly"
 ( Syntax.Op (_1, Syntax.Equal, _3) )
# 378 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 75 "parser.mly"
 ( Syntax.Op (_1, Syntax.Less, _3) )
# 386 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 77 "parser.mly"
 ( Syntax.Op (_3, Syntax.Less, _1) )
# 394 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 79 "parser.mly"
 ( Syntax.Op (_1, Syntax.Lessequal, _3) )
# 402 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 81 "parser.mly"
 ( Syntax.Op (_3, Syntax.Lessequal, _1) )
# 410 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 83 "parser.mly"
 ( Syntax.Op (_3, Syntax.Notequal, _1) )
# 418 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 85 "parser.mly"
 ( Syntax.If (_2, _4, _6))
# 427 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 87 "parser.mly"
 ( Syntax.Op (Syntax.Number (0), Syntax.Minus, _2) )
# 434 "parser.ml"
               : Syntax.t))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
