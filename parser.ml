type token =
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | TIMES
  | EQUAL
  | LESS
  | MORE
  | LESSEQUAL
  | MOREEQUAL
  | NOTEQUAL
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | FUN
  | ARROW
  | REC
  | LNIL
  | RNIL
  | CONS
  | MATCH
  | WITH
  | OR
  | COLON
  | DIVIDE
  | RAISE
  | TRY
  | ERROR
  | EXCEPTION
  | NUMBER of (int)
  | VAR of (string)
  | TRUE
  | FALSE
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* 補助的な変数、関数、型などの定義 *)
# 44 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* EQUAL *);
  263 (* LESS *);
  264 (* MORE *);
  265 (* LESSEQUAL *);
  266 (* MOREEQUAL *);
  267 (* NOTEQUAL *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LET *);
  272 (* IN *);
  273 (* FUN *);
  274 (* ARROW *);
  275 (* REC *);
  276 (* LNIL *);
  277 (* RNIL *);
  278 (* CONS *);
  279 (* MATCH *);
  280 (* WITH *);
  281 (* OR *);
  282 (* COLON *);
  283 (* DIVIDE *);
  284 (* RAISE *);
  285 (* TRY *);
  286 (* ERROR *);
  287 (* EXCEPTION *);
  290 (* TRUE *);
  291 (* FALSE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  288 (* NUMBER *);
  289 (* VAR *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\005\000\005\000\004\000\006\000\
\006\000\006\000\006\000\006\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\001\000\003\000\002\000\
\003\000\003\000\004\000\004\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\004\000\001\000\003\000\003\000\
\001\000\008\000\006\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\006\000\013\000\005\000\007\000\005\000\007\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\004\000\005\000\006\000\000\000\
\000\000\000\000\025\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\039\000\037\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\078\000\079\000\017\000\018\000\019\000\020\000"

let yysindex = "\012\000\
\087\004\000\000\087\004\087\004\087\004\243\254\239\254\061\004\
\087\004\017\255\087\004\000\000\000\000\000\000\000\000\223\003\
\143\255\003\255\000\000\000\000\094\002\180\255\129\002\250\254\
\022\255\011\255\000\000\164\002\065\255\242\254\199\002\247\254\
\234\002\087\004\087\004\087\004\087\004\087\004\087\004\087\004\
\087\004\087\004\087\004\087\004\008\255\087\004\008\255\087\004\
\000\000\087\004\002\255\087\004\087\004\087\004\000\000\087\004\
\018\255\087\004\087\004\249\254\135\255\135\255\180\255\255\254\
\255\254\255\254\255\254\255\254\255\254\223\003\180\255\223\003\
\223\003\013\003\031\255\048\003\002\004\069\255\000\000\000\000\
\030\255\083\003\118\003\020\255\024\255\087\004\087\004\087\004\
\000\000\087\004\037\255\000\000\000\000\042\255\043\255\002\004\
\153\003\002\004\000\000\087\004\087\004\087\004\087\004\188\003\
\002\004\002\004\002\004\029\255\041\255\034\255\050\255\087\004\
\002\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\183\000\001\000\000\000\000\000\000\000\105\000\000\000\000\000\
\000\000\000\000\000\000\000\000\222\001\037\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\209\000\234\000\131\000\255\000\
\020\001\048\001\083\001\117\001\143\001\047\002\157\000\053\002\
\068\002\000\000\000\000\000\000\169\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\195\001\
\000\000\221\001\000\000\000\000\000\000\000\000\000\000\000\000\
\239\001\254\001\014\002\000\000\000\000\000\000\000\000\000\000\
\032\002"

let yygindex = "\000\000\
\006\000\205\255\125\000\073\000\000\000\000\000"

let yytablesize = 1402
let yytable = "\003\000\
\022\000\034\000\035\000\036\000\080\000\024\000\016\000\048\000\
\021\000\022\000\023\000\056\000\001\000\028\000\031\000\026\000\
\033\000\032\000\008\000\025\000\058\000\059\000\084\000\085\000\
\048\000\044\000\051\000\052\000\053\000\046\000\012\000\013\000\
\014\000\015\000\075\000\014\000\087\000\081\000\099\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\091\000\072\000\094\000\073\000\100\000\074\000\
\095\000\076\000\077\000\101\000\102\000\109\000\110\000\082\000\
\083\000\003\000\111\000\112\000\041\000\003\000\013\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\030\000\000\000\000\000\000\000\008\000\055\000\046\000\000\000\
\008\000\089\000\043\000\096\000\097\000\098\000\090\000\044\000\
\012\000\013\000\014\000\015\000\012\000\013\000\014\000\015\000\
\015\000\104\000\105\000\106\000\107\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\113\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\029\000\000\000\000\000\003\000\
\000\000\000\000\000\000\036\000\045\000\047\000\000\000\003\000\
\000\000\045\000\045\000\045\000\000\000\000\000\000\000\000\000\
\045\000\047\000\008\000\045\000\020\000\045\000\000\000\000\000\
\000\000\044\000\008\000\000\000\046\000\000\000\012\000\013\000\
\014\000\015\000\000\000\000\000\000\000\000\000\012\000\013\000\
\014\000\015\000\000\000\000\000\003\000\000\000\028\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\008\000\
\045\000\045\000\045\000\000\000\000\000\000\000\045\000\045\000\
\016\000\000\000\000\000\012\000\013\000\014\000\015\000\000\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\000\000\017\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\022\000\022\000\000\000\
\022\000\000\000\000\000\030\000\022\000\022\000\000\000\000\000\
\022\000\022\000\022\000\022\000\000\000\000\000\000\000\000\000\
\022\000\022\000\022\000\022\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\031\000\
\014\000\014\000\000\000\014\000\000\000\000\000\000\000\014\000\
\014\000\000\000\000\000\014\000\014\000\014\000\014\000\000\000\
\000\000\000\000\000\000\014\000\014\000\014\000\014\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\032\000\013\000\013\000\000\000\013\000\000\000\
\000\000\000\000\013\000\013\000\000\000\000\000\013\000\013\000\
\013\000\013\000\000\000\000\000\000\000\000\000\013\000\013\000\
\013\000\013\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\033\000\015\000\015\000\000\000\
\015\000\000\000\000\000\000\000\000\000\015\000\015\000\000\000\
\015\000\015\000\015\000\015\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\034\000\018\000\
\018\000\000\000\018\000\000\000\000\000\000\000\000\000\018\000\
\018\000\000\000\018\000\018\000\018\000\018\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\021\000\020\000\020\000\000\000\020\000\000\000\000\000\000\000\
\000\000\020\000\020\000\000\000\020\000\020\000\020\000\020\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\035\000\028\000\028\000\000\000\028\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\028\000\028\000\
\028\000\028\000\016\000\016\000\016\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\027\000\016\000\016\000\000\000\
\016\000\000\000\000\000\000\000\000\000\016\000\016\000\000\000\
\016\000\016\000\016\000\017\000\017\000\017\000\040\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\
\000\000\017\000\000\000\000\000\000\000\038\000\017\000\017\000\
\019\000\017\000\017\000\017\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\026\000\019\000\000\000\
\000\000\000\000\000\000\019\000\019\000\030\000\019\000\019\000\
\019\000\030\000\030\000\030\000\030\000\030\000\030\000\036\000\
\030\000\030\000\000\000\030\000\000\000\000\000\000\000\000\000\
\030\000\030\000\000\000\030\000\030\000\030\000\024\000\000\000\
\000\000\031\000\000\000\000\000\010\000\031\000\031\000\031\000\
\031\000\031\000\031\000\000\000\031\000\031\000\000\000\031\000\
\000\000\000\000\000\000\023\000\031\000\031\000\000\000\031\000\
\031\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\
\032\000\032\000\032\000\032\000\032\000\032\000\000\000\032\000\
\032\000\000\000\032\000\000\000\000\000\000\000\000\000\032\000\
\032\000\000\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\033\000\033\000\000\000\033\000\000\000\000\000\000\000\
\000\000\033\000\033\000\000\000\033\000\033\000\033\000\000\000\
\034\000\000\000\000\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\000\000\034\000\034\000\000\000\034\000\000\000\
\000\000\000\000\000\000\034\000\034\000\000\000\034\000\034\000\
\034\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\021\000\000\000\
\021\000\000\000\000\000\000\000\000\000\021\000\021\000\000\000\
\021\000\021\000\021\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\000\000\035\000\000\000\000\000\000\000\000\000\035\000\
\035\000\000\000\035\000\035\000\035\000\000\000\027\000\000\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\027\000\027\000\000\000\027\000\000\000\000\000\000\000\
\040\000\027\000\027\000\000\000\027\000\027\000\027\000\028\000\
\028\000\000\000\000\000\040\000\040\000\000\000\040\000\038\000\
\000\000\000\000\000\000\040\000\040\000\000\000\040\000\040\000\
\040\000\000\000\038\000\038\000\000\000\038\000\000\000\026\000\
\000\000\000\000\038\000\038\000\000\000\038\000\038\000\038\000\
\000\000\000\000\026\000\026\000\000\000\026\000\000\000\000\000\
\000\000\036\000\026\000\026\000\000\000\026\000\026\000\026\000\
\000\000\000\000\000\000\000\000\036\000\036\000\000\000\036\000\
\024\000\000\000\000\000\000\000\036\000\036\000\010\000\036\000\
\036\000\036\000\000\000\024\000\024\000\000\000\024\000\000\000\
\000\000\010\000\010\000\024\000\010\000\023\000\024\000\024\000\
\024\000\010\000\000\000\000\000\010\000\010\000\010\000\000\000\
\023\000\023\000\000\000\023\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\023\000\023\000\023\000\003\000\049\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\043\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\012\000\013\000\014\000\
\015\000\003\000\000\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\043\000\000\000\
\000\000\000\000\000\000\044\000\000\000\000\000\000\000\000\000\
\012\000\013\000\014\000\015\000\003\000\000\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\043\000\000\000\000\000\000\000\054\000\044\000\000\000\
\000\000\000\000\000\000\012\000\013\000\014\000\015\000\003\000\
\000\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\043\000\000\000\057\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\012\000\013\000\
\014\000\015\000\003\000\000\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\043\000\
\000\000\060\000\000\000\000\000\044\000\000\000\000\000\000\000\
\000\000\012\000\013\000\014\000\015\000\003\000\000\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\086\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\043\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\012\000\013\000\014\000\015\000\
\003\000\000\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\000\000\000\000\000\000\000\000\088\000\
\000\000\000\000\000\000\008\000\000\000\043\000\000\000\000\000\
\000\000\000\000\044\000\000\000\000\000\000\000\000\000\012\000\
\013\000\014\000\015\000\003\000\092\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\043\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\012\000\013\000\014\000\015\000\003\000\093\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\043\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\012\000\013\000\014\000\
\015\000\003\000\000\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\000\000\000\000\000\000\
\103\000\000\000\000\000\000\000\008\000\000\000\043\000\000\000\
\000\000\000\000\000\000\044\000\000\000\000\000\000\000\000\000\
\012\000\013\000\014\000\015\000\003\000\000\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\043\000\000\000\000\000\108\000\000\000\044\000\000\000\
\000\000\000\000\000\000\012\000\013\000\014\000\015\000\003\000\
\000\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\043\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\012\000\013\000\
\014\000\015\000\003\000\000\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
\000\000\012\000\013\000\014\000\015\000\022\000\000\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\003\000\000\000\022\000\
\004\000\000\000\000\000\000\000\022\000\022\000\022\000\022\000\
\005\000\000\000\000\000\006\000\000\000\007\000\000\000\000\000\
\008\000\027\000\000\000\009\000\000\000\000\000\000\000\003\000\
\010\000\011\000\004\000\000\000\012\000\013\000\014\000\015\000\
\000\000\000\000\005\000\000\000\000\000\006\000\000\000\007\000\
\000\000\000\000\008\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\010\000\011\000\000\000\000\000\012\000\013\000\
\014\000\015\000"

let yycheck = "\001\001\
\000\000\003\001\004\001\005\001\056\000\019\001\001\000\022\001\
\003\000\004\000\005\000\026\001\001\000\008\000\009\000\033\001\
\011\000\001\001\020\001\033\001\030\001\031\001\030\001\031\001\
\022\001\027\001\033\001\006\001\018\001\022\001\032\001\033\001\
\034\001\035\001\033\001\000\000\006\001\020\001\090\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\021\001\046\000\033\001\048\000\018\001\050\000\
\033\001\052\000\053\000\018\001\018\001\033\001\022\001\058\000\
\059\000\001\001\033\001\018\001\000\000\001\001\000\000\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\008\000\255\255\255\255\255\255\020\001\021\001\022\001\255\255\
\020\001\021\001\022\001\086\000\087\000\088\000\026\001\027\001\
\032\001\033\001\034\001\035\001\032\001\033\001\034\001\035\001\
\000\000\100\000\101\000\102\000\103\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\008\000\255\255\255\255\001\001\
\255\255\255\255\255\255\005\001\016\000\017\000\255\255\001\001\
\255\255\021\000\022\000\023\000\255\255\255\255\255\255\255\255\
\028\000\029\000\020\001\031\000\000\000\033\000\255\255\255\255\
\255\255\027\001\020\001\255\255\022\001\255\255\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\255\255\255\255\001\001\255\255\000\000\255\255\
\255\255\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\020\001\
\076\000\077\000\078\000\255\255\255\255\255\255\082\000\083\000\
\000\000\255\255\255\255\032\001\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\096\000\097\000\098\000\255\255\
\255\255\255\255\255\255\255\255\104\000\105\000\106\000\107\000\
\255\255\000\000\255\255\255\255\255\255\113\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\255\255\
\016\001\255\255\255\255\000\000\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\000\000\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\000\000\013\001\014\001\255\255\016\001\255\255\
\255\255\255\255\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\024\001\025\001\026\001\027\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\000\000\013\001\
\014\001\255\255\016\001\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\024\001\025\001\026\001\027\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\000\000\013\001\014\001\255\255\016\001\255\255\255\255\255\255\
\255\255\021\001\022\001\255\255\024\001\025\001\026\001\027\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\000\000\013\001\014\001\255\255\016\001\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\024\001\025\001\026\001\002\001\003\001\004\001\000\000\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\255\255\016\001\255\255\255\255\255\255\000\000\021\001\022\001\
\002\001\024\001\025\001\026\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\000\000\016\001\255\255\
\255\255\255\255\255\255\021\001\022\001\002\001\024\001\025\001\
\026\001\006\001\007\001\008\001\009\001\010\001\011\001\000\000\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\022\001\255\255\024\001\025\001\026\001\000\000\255\255\
\255\255\002\001\255\255\255\255\000\000\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\255\255\016\001\
\255\255\255\255\255\255\000\000\021\001\022\001\255\255\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\255\255\016\001\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\024\001\025\001\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\014\001\255\255\016\001\255\255\255\255\255\255\
\255\255\021\001\022\001\255\255\024\001\025\001\026\001\255\255\
\002\001\255\255\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\255\255\016\001\255\255\
\255\255\255\255\255\255\021\001\022\001\255\255\024\001\025\001\
\026\001\255\255\002\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\024\001\025\001\026\001\255\255\002\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\255\255\016\001\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\024\001\025\001\026\001\255\255\002\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\013\001\014\001\255\255\016\001\255\255\255\255\255\255\
\002\001\021\001\022\001\255\255\024\001\025\001\026\001\026\001\
\027\001\255\255\255\255\013\001\014\001\255\255\016\001\002\001\
\255\255\255\255\255\255\021\001\022\001\255\255\024\001\025\001\
\026\001\255\255\013\001\014\001\255\255\016\001\255\255\002\001\
\255\255\255\255\021\001\022\001\255\255\024\001\025\001\026\001\
\255\255\255\255\013\001\014\001\255\255\016\001\255\255\255\255\
\255\255\002\001\021\001\022\001\255\255\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\013\001\014\001\255\255\016\001\
\002\001\255\255\255\255\255\255\021\001\022\001\002\001\024\001\
\025\001\026\001\255\255\013\001\014\001\255\255\016\001\255\255\
\255\255\013\001\014\001\021\001\016\001\002\001\024\001\025\001\
\026\001\021\001\255\255\255\255\024\001\025\001\026\001\255\255\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\024\001\025\001\026\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\022\001\255\255\255\255\255\255\255\255\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\255\255\022\001\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\255\255\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\001\001\
\255\255\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\022\001\255\255\024\001\255\255\
\255\255\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\001\001\255\255\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\255\255\022\001\
\255\255\024\001\255\255\255\255\027\001\255\255\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\001\001\255\255\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\255\255\255\255\255\255\255\255\255\255\
\020\001\255\255\022\001\255\255\255\255\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\001\001\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\020\001\255\255\022\001\255\255\255\255\
\255\255\255\255\027\001\255\255\255\255\255\255\255\255\032\001\
\033\001\034\001\035\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\255\255\
\022\001\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\035\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\022\001\255\255\255\255\255\255\255\255\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\020\001\255\255\022\001\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\255\255\022\001\255\255\255\255\025\001\255\255\027\001\255\255\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\001\001\
\255\255\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\022\001\255\255\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\001\001\255\255\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\255\255\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\001\001\255\255\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\001\001\255\255\027\001\
\004\001\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\012\001\255\255\255\255\015\001\255\255\017\001\255\255\255\255\
\020\001\021\001\255\255\023\001\255\255\255\255\255\255\001\001\
\028\001\029\001\004\001\255\255\032\001\033\001\034\001\035\001\
\255\255\255\255\012\001\255\255\255\255\015\001\255\255\017\001\
\255\255\255\255\020\001\255\255\255\255\023\001\255\255\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\032\001\033\001\
\034\001\035\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQUAL\000\
  LESS\000\
  MORE\000\
  LESSEQUAL\000\
  MOREEQUAL\000\
  NOTEQUAL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  REC\000\
  LNIL\000\
  RNIL\000\
  CONS\000\
  MATCH\000\
  WITH\000\
  OR\000\
  COLON\000\
  DIVIDE\000\
  RAISE\000\
  TRY\000\
  ERROR\000\
  EXCEPTION\000\
  TRUE\000\
  FALSE\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 40 "parser.mly"
  (Syntax.Cons(_1,Syntax.Nil))
# 566 "parser.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_contents) in
    Obj.repr(
# 42 "parser.mly"
  (Syntax.Cons(_1,_3))
# 574 "parser.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 46 "parser.mly"
 ( Syntax.Number (_1) )
# 581 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 48 "parser.mly"
 ( Syntax.Var (_1))
# 588 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
 ( Syntax.Bool (true) )
# 594 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
 ( Syntax.Bool (false) )
# 600 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 54 "parser.mly"
 ( _2 )
# 607 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
 (Syntax.Nil)
# 613 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    Obj.repr(
# 58 "parser.mly"
  ( Syntax.Cons (_2,Syntax.Nil))
# 620 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 60 "parser.mly"
 ( Syntax.Cons(_1,_3))
# 628 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'list_contents) in
    Obj.repr(
# 62 "parser.mly"
  (Syntax.Cons (_2,_4))
# 636 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'minus) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'list_contents) in
    Obj.repr(
# 64 "parser.mly"
  (Syntax.Cons (_2,_4))
# 644 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 70 "parser.mly"
 (Syntax.App (_1 , _2))
# 652 "parser.ml"
               : 'app))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 72 "parser.mly"
 (Syntax.App (_1 , _2))
# 660 "parser.ml"
               : 'app))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 76 "parser.mly"
 ( Syntax.Op (Syntax.Number (0), Syntax.Minus, _2) )
# 667 "parser.ml"
               : 'minus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 80 "parser.mly"
 ( Syntax.Op (_1, Syntax.Plus, _3) )
# 675 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 82 "parser.mly"
 ( Syntax.Op (_1, Syntax.Minus, _3) )
# 683 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 84 "parser.mly"
 ( Syntax.Op (_1, Syntax.Times, _3) )
# 691 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 86 "parser.mly"
 ( Syntax.Op (_1, Syntax.Equal, _3) )
# 699 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 88 "parser.mly"
 ( Syntax.Op (_1, Syntax.Divide, _3) )
# 707 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
 (Syntax.Fun (_2,_4))
# 715 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'minus) in
    Obj.repr(
# 94 "parser.mly"
  (_1)
# 722 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'minus) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
 ( Syntax.Cons(_1,_3))
# 730 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 98 "parser.mly"
 ( Syntax.Cons(_1,_3))
# 738 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app) in
    Obj.repr(
# 100 "parser.mly"
 (_1)
# 745 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
 ( Syntax.Rec (_3, _4, _6, _8))
# 755 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
 ( Syntax.Let (_2, _4, _6))
# 764 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 106 "parser.mly"
 ( _1 )
# 771 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'op) in
    Obj.repr(
# 108 "parser.mly"
 (_1)
# 778 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
 ( Syntax.Op (_1, Syntax.Less, _3) )
# 786 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
 ( Syntax.Op (_3, Syntax.Less, _1) )
# 794 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
 ( Syntax.Op (_1, Syntax.Lessequal, _3) )
# 802 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
 ( Syntax.Op (_3, Syntax.Lessequal, _1) )
# 810 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
 ( Syntax.Op (_3, Syntax.Notequal, _1) )
# 818 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
 ( Syntax.If (_2, _4, _6))
# 827 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _13 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 122 "parser.mly"
 ( Syntax.Match (_2, _7, _9 , _11 , _13))
# 838 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
  ( Syntax.Raise(_4))
# 845 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Syntax.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
  (Syntax.Try(_2,_5,_7))
# 854 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
  ( Syntax.Raise(_4))
# 861 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Syntax.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
  (Syntax.Try(_2,_5,_7))
# 870 "parser.ml"
               : Syntax.t))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
